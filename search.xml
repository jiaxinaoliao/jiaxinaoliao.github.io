<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>win11快捷键大全</title>
      <link href="/2022/11/02/win11%E5%85%A8%E9%83%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/11/02/win11%E5%85%A8%E9%83%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>Win11快捷键大全</p><p>　　1、Win+A 打开快速设置面板</p><p>　　2、Win+B 快速跳转系统托盘</p><p>　　3、Win+C 打开 Microsoft Teams</p><p>　　4、Win+D 快速显示桌面</p><p>　　5、Win+E 打开资源管理器</p><p>　　6、Win+F 一键提交反馈</p><p>　　7、Win+G 启动 Xbox Game Bar</p><p>　　8、Win+H 语音听写</p><p>　　9、Win+I 打开设置</p><p>　　10、Win+K 投屏到其他设备</p><p>　　11、Win+L 锁屏</p><p>　　12、Win+M 窗口最小化</p><p>　　13、Win+N 打开通知面板&#x2F;月历面板</p><p>　　14、Win+P 修改投影模式</p><p>　　15、Win+Q&#x2F;Win+S 一键搜索</p><p>　　16、Win+R 运行</p><p>　　17、Win+T 查看已打开程序缩略图</p><p>　　18、Win+V 打开云剪贴板</p><p>　　19、Win+W 呼出资讯与兴趣栏</p><p>　　20、Win+X 呼出简易开始菜单</p><p>　　21、Win+Z 打开窗口布局</p><p>　　22、Win + 空格 切换输入法</p><p>　　23、Win + 光标键 窗口排版</p><p>　　24、Win+TAB 虚拟桌面切换</p><p>　　25、Win+Ctrl+D 新建虚拟桌面</p><p>　　26、Win+Prtscn 一键截屏</p><p>　　27、Win+Shift+S 专业屏幕</p><p>　　28、Win+Home 最小化非活动窗口 </p>]]></content>
      
      
      <categories>
          
          <category> 编程入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win11快捷键大全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lldb快速基础使用</title>
      <link href="/2022/11/02/lldb%E5%BF%AB%E9%80%9F%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/02/lldb%E5%BF%AB%E9%80%9F%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="利用lldb调试"><a href="#利用lldb调试" class="headerlink" title="利用lldb调试"></a>利用lldb调试</h1><p>Low Level Debugger</p><p>指的是轻量级调试器不是低级</p><p>clang++ 和clang 编译</p><p><code>clang++ filename.cpp -o neme</code></p><p>clang（如果是c++就用clang++） + 文件名称 + -o（重命名） 名字</p><p>如果直接用clang++ + 文件名</p><p>默认输出的为a.exe</p><p>和gcc，g++类似</p><p>相对于gdb来说lldb是下一代跟好用</p><p>lldb主要用于调试c，cpp和objective-c</p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>windows中用的<code>llvm-mingw</code>在github中下载解压之后将bin目录添加到系统环境变量中，包含g++和gcc默认用clang</p><h1 id="调试使用"><a href="#调试使用" class="headerlink" title="调试使用"></a>调试使用</h1><h2 id="1-运行断点"><a href="#1-运行断点" class="headerlink" title="1. 运行断点"></a>1. 运行断点</h2><p>编译用<code>clang++ test.cpp</code>编译程序</p><p>调试时需要使用-g参数<code>clang++ -g test.cpp</code></p><p>仓库中的快捷键<F5>一键编译相当于<code>clang++ test.cpp</code></p><p><F4>一键调试编译相当于<code>clang++ -g test.cpp</code></p><p>也可以自行更改</p><p>！！！</p><p>！！！</p><p>！！！调试的时候要先-g编译才可以</p><p>调试的时候一定要用-g参数<code>clang++ -g test.cpp</code>或者<F4>一键调试编译</p><p>之后调试的时候才能打断点</p><p>之后运行 <code>lldb .\a.exe</code></p><h3 id="1-1-运行"><a href="#1-1-运行" class="headerlink" title="1.1 运行"></a>1.1 运行</h3><p>用<code>（(lldb) run</code>或者<code>(lldb) r</code>运行</p><h3 id="1-2-断点"><a href="#1-2-断点" class="headerlink" title="1.2 断点"></a>1.2 断点</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(lldb) breakpoint set -f test.cpp -l #行数</span><br><span class="line">    -f 后更源文件位置 -l 之后是断点行数</span><br><span class="line">(lldb) br s - f test.cpp -l #</span><br><span class="line">    缩写形式</span><br><span class="line">(lldb) b test.cpp : #</span><br><span class="line">    简写</span><br><span class="line">    </span><br><span class="line">(lldb) b [函数名]</span><br></pre></td></tr></table></figure><h3 id="1-3-删除断点"><a href="#1-3-删除断点" class="headerlink" title="1.3 删除断点"></a>1.3 删除断点</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(lldb) br list</span><br><span class="line">    列出所有断点</span><br><span class="line">(lldb) br del #序号</span><br><span class="line">    删除#的断点</span><br><span class="line">(lldb) br del</span><br><span class="line">    删除所有断点</span><br></pre></td></tr></table></figure><h2 id="2-分步调试"><a href="#2-分步调试" class="headerlink" title="2. 分步调试"></a>2. 分步调试</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">下一步（下一行，一行一行执行）</span><br><span class="line">(lldb) <span class="built_in">next</span></span><br><span class="line">(lldb) n</span><br><span class="line">    </span><br><span class="line">进入（运行到某一行n会直接下一行，用s进入函数）</span><br><span class="line">（用s进入函数系统提供的如prinf不会进入，如果不是函数入口s和n功能一样）</span><br><span class="line">(lldb) <span class="built_in">step</span></span><br><span class="line">(lldb) s</span><br><span class="line">    </span><br><span class="line">继续（运行之后停在第一个断点的时候用c直接到下一个断点）</span><br><span class="line">(lldb) <span class="built_in">continue</span></span><br><span class="line">(lldb) c</span><br></pre></td></tr></table></figure><h2 id="3-查看变量"><a href="#3-查看变量" class="headerlink" title="3. 查看变量"></a>3. 查看变量</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">打印变量值</span><br><span class="line">(lldb) <span class="function">print <span class="title">varname</span></span></span><br><span class="line"><span class="function"><span class="params">(lldb)</span> p varname</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    如</span></span><br><span class="line"><span class="function">    <span class="params">(lldb)</span> p a</span></span><br><span class="line"><span class="function">    输出$0 </span>= <span class="number">10</span></span><br><span class="line">    可以用 expr $<span class="number">0</span> = <span class="number">20</span></span><br><span class="line">    改变数值</span><br><span class="line">    如</span><br><span class="line">    $<span class="number">0</span> = <span class="number">10</span></span><br><span class="line">    (lldb) expr $<span class="number">0</span> = <span class="number">20</span></span><br><span class="line">    会输出 $<span class="number">1</span> = <span class="number">20</span></span><br><span class="line">    </span><br><span class="line">    (lldb) po varname</span><br><span class="line">    只查看对象的值(只显示数值)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">列出当前栈帧变量</span><br><span class="line">(lldb) frame <span class="built_in">variable</span></span><br><span class="line">(lldb) fr v</span><br><span class="line">    </span><br><span class="line">切换栈帧（用bt查看序号#）</span><br><span class="line">(lldb) fr select #</span><br><span class="line">(lldb) fr s #</span><br><span class="line">    </span><br><span class="line">调用栈</span><br><span class="line">（调用的会在最上面）</span><br><span class="line">（当前所在栈会有*号）</span><br><span class="line">(lldb) bt</span><br></pre></td></tr></table></figure><h2 id="4-监视断点"><a href="#4-监视断点" class="headerlink" title="4. 监视断点"></a>4. 监视断点</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">全局变量</span><br><span class="line">(lldb) watchpoint set variable [some globalVariable]</span><br><span class="line">(lldb) watchpoint set variable -w read | read_write [some globalVariable]</span><br><span class="line"> </span><br><span class="line">局部变量</span><br><span class="line">(lldb) <span class="function">b <span class="title">main</span></span></span><br><span class="line"><span class="function"><span class="params">(lldb)</span> w s v d.memberVar</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">在变量改变的时候会触发</span></span><br><span class="line"><span class="function">显示old value和 <span class="keyword">new</span> value</span></span><br></pre></td></tr></table></figure><p>用<code>(lldb) w s v 关键值</code>进行监视，当关键值变化时会自动暂停并输出old value 和new value</p><h2 id="5-终止调试"><a href="#5-终止调试" class="headerlink" title="5. 终止调试"></a>5. 终止调试</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(lldb) kill</span><br><span class="line">停止调试</span><br><span class="line">    </span><br><span class="line">(lldb) quit</span><br><span class="line">退出lldb</span><br><span class="line">或者exit或Ctrl+c（两次）</span><br></pre></td></tr></table></figure><p>只列举了常用简单的一小部分</p><p>还有很多高级操作查看官网说明</p>]]></content>
      
      
      <categories>
          
          <category> 编程入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell 去除版本信息</title>
      <link href="/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="去除powershell的版本信息"><a href="#去除powershell的版本信息" class="headerlink" title="去除powershell的版本信息"></a>去除powershell的版本信息</h1><p>正常打开powershell的话会显示版本信息以及版权</p><img src="/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/pwsh-1.png" class=""><p>要想去除的话只要在windows terminal的设置中</p><img src="/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/pwsh-2.png" class=""><p>点击powershell的配置，打开右侧的命令行在后面加入<code>空格-nologo</code>即可</p><img src="/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/pwsh-3.png" class=""><p>记得保存重新打开即可</p><img src="/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/pwsh-4.png" class=""><p>再次打开就没有了</p><p><strong>注意：</strong>用oh-my-posh的话会有一些慢并且在vim里面打开的话还是默认有版本信息的，不建议去掉</p><p>去掉的话美化效果会出问题，对功能没有影响</p><img src="/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/pwsh-5.png" class=""><p>会出现奇奇怪怪的样子不过只要clear一下就可以了，</p><p>不去掉的话不会出现这个问题</p><img src="/2022/10/26/powershell-%E5%8E%BB%E9%99%A4%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/pwsh-6.png" class="">]]></content>
      
      
      <categories>
          
          <category> 编程入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插件分享</title>
      <link href="/2022/10/25/%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
      <url>/2022/10/25/%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="vimium-c全键盘操作浏览器插件"><a href="#vimium-c全键盘操作浏览器插件" class="headerlink" title="vimium c全键盘操作浏览器插件"></a>vimium c全键盘操作浏览器插件</h1><p>原来用firefox的时候一直用的一个插件用来全键盘操作</p><p>类似的插件还有很多比如surfingkeys也可以，个人用firefox+vimium c比较多</p><p>前两天突然发现edge上也有这个插件，安装完基本就可以实现全键盘操作了</p><img src="/2022/10/25/%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/chajian-1.png" class=""><p>直接在微软的插件扩展中搜索安装即可</p><p>谷歌和firefox也有，用shift+&#x2F;即可打开详细信息</p><p>shift+&#x2F;打开之后写的使用方法非常详细</p><p>写的非常清楚，就是前期的话需要学习一下，但是用熟练之后可以完全解放鼠标</p><h2 id="edge的新建标签"><a href="#edge的新建标签" class="headerlink" title="edge的新建标签"></a>edge的新建标签</h2><p>使用vimium c的话在edge的自带的新建标签里面是不工作的</p><img src="/2022/10/25/%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/chajian-2.png" class=""><p>三种解决方法</p><h3 id="1-第一种"><a href="#1-第一种" class="headerlink" title="1.第一种"></a>1.第一种</h3><p>就是随便搜索一个关键字</p><p>切换到其他页面之后就可以正常使用了</p><p>但是比较麻烦每次都要先搜索一下</p><h3 id="2-第二种方法"><a href="#2-第二种方法" class="headerlink" title="2. 第二种方法"></a>2. 第二种方法</h3><p>在设置里面更改开始页</p><img src="/2022/10/25/%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/chajian-3.png" class=""><p>这里用的是<a href="https://limestart.cn青柠起始页也是比较干净的/">https://limestart.cn青柠起始页也是比较干净的</a></p><p>或者换成自己喜欢的其他美化的插件之类的就可以正常使用了</p><p>但是点击加号新建标签页的时候还是会用默认的标签页</p><h3 id="3-所以第三种方法"><a href="#3-所以第三种方法" class="headerlink" title="3.所以第三种方法"></a>3.所以第三种方法</h3><p>需要下载一个插件</p><img src="/2022/10/25/%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/chajian-5.png" class=""><img src="/2022/10/25/%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/chajian-6.png" class=""><p>将插件开启之后设置启动页面就可以了</p><p>再点击新建默认的就是青柠的起始页面了</p>]]></content>
      
      
      <categories>
          
          <category> 编程入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neovim快速配置教程</title>
      <link href="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="纯windows下的neovim快速配置过程"><a href="#纯windows下的neovim快速配置过程" class="headerlink" title="纯windows下的neovim快速配置过程"></a>纯windows下的neovim快速配置过程</h1><p>由于github的问题可能图片加载不是很好可以直接下方连接下载最新版解压即可</p><p><a href="https://github.com/jiaxinaoliao/neovimBeginCpp/releases">https://github.com/jiaxinaoliao/neovimBeginCpp/releases</a></p><p>解压之后的REDME.md文件（推荐用typora打开或者notepads（alt+p开启markdown预览）也可以）即可查看</p><p>虽然不是开箱即用但是也省略了大部分配置时间</p><p>下载之后进行简单的安装即可使用</p><p>纯windows环境<strong>不需要虚拟机</strong>纯windows环境下</p><p>linux–wsl（ubuntu22.04LTS）（配置文件在.config）也可以，小改动即可</p><p>本文用的在压缩包的nvim文件夹没有用wsl</p><p>macos应该也能兼容（没有试过）</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>win10或者win11都可以主要用于c\c++的学习使用（学习编程或者小项目）</p><p><strong>主要用于windows下的 学习编程  学习编程  学习编程 c\c++ c\c++ c\c++</strong></p><p>python应该也可以（没有试过）</p><p>可以实现IDE的基本功能（编译、运行、调试、跳转、报错、提示等等）</p><p><strong>系统：</strong>利用的win11的环境<strong>windows11专业版21H2版本</strong></p><p>（22.10.3更新到22H2版本）</p><p><strong>终端：</strong>最新版的<strong>Windows Terminal</strong>＋<strong>powershell</strong></p><ul><li>注意 ：Microsoft powershell和powershell不一样</li></ul><p>PowerShell 7.2 是下一个长期服务 (LTS) 版本，基于 .NET 6.0 构建。</p><p>在windows和macos和linux都可以支持</p><p><strong>美化：</strong> <strong>oh-my-push</strong></p><p>编译用的clangd调试用的lldb</p><p>windows下lldb用的是MinGW64的llvm-mingw</p><p>利用的工具是scoop类比于ubuntu下的apt，apt-get，arch的pacman</p><p><strong>具体机型配置无所谓，不需要太好的性能八代i3的cpu也能带的动，占用资源超级小</strong></p><p><strong>总结：windows + windows terminal + powershell + oh-my-push + neovim + cpp（clang + lldb）</strong></p><p>主要用于C&#x2F;C++其他语言也可以，前端、python、java等也可以，需要小改动</p><h2 id="2-环境安装"><a href="#2-环境安装" class="headerlink" title="2. 环境安装"></a>2. 环境安装</h2><p>win10和win11差不多都可以兼容</p><h3 id="2-1-下载配置文件"><a href="#2-1-下载配置文件" class="headerlink" title="2.1 下载配置文件"></a>2.1 下载配置文件</h3><p>首先下载仓库(<a href="https://github.com/shuangshuangbb/neovimBeginCpp/releases)%E6%89%93%E5%BC%80%E7%BD%91%E5%9D%80">https://github.com/shuangshuangbb/neovimBeginCpp/releases)打开网址</a></p><p>打不开github的话可以考虑用fastgithub进行加速之后，下载就行</p><p>windows直接下载压缩包之后解压放在一边（方便的位置如桌面配置之后可以删除）</p><p>下载最新版的zip</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-1.png" class=""><p>在主页也可以下载</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-2.png" class=""><h3 id="2-2-配置终端设置"><a href="#2-2-配置终端设置" class="headerlink" title="2.2 配置终端设置"></a>2.2 配置终端设置</h3><p>微软商店下载最新版本<strong>Windows Terminal</strong>和<strong>Powershell</strong></p><p>打开下载的配置文件夹里面有一个字体的文件夹里面有Inconsolata LGC Bold Nerd Font Complete Mono Windows Compatible.ttf字体双击打开安装即可，或者自行去(<a href="https://www.nerdfonts.com/)%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BDnerd">https://www.nerdfonts.com/)官网下载nerd</a> fonts的自己喜欢的字体</p><p>22.10.3换字体了Code New Roman Bold Nerd Font Complete Windows Compatible.otf也在文件夹里面打开安装就行</p><p>之后打开windows terminal以下简称wt</p><p>打开wt的设置，在设置中打开配置JSON文件如图</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-3.png" class=""><p>打开配置文件夹打开wt+pwsh配置文件的文件夹里面有一个<strong>windowsterminal 配置.txt</strong>文件将其中的内容复制<strong>替换</strong>原本的JSON配置文件</p><p>之后保存关闭即可，再次打开wt如果改变说明设置成功，标签栏默认隐藏（alt+z可以打开打开标签栏）如果不习惯也可以在设置-&gt;启动-&gt;启动模式中的启动模式改为别的即可</p><p>也可以在wt的设置中打开默认值-&gt;外观</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-4.png" class=""><p>之后根据自己的喜好设置透明度或者背景等，也可以更改其他nerd fonts字体</p><p>设置完成之后wt就可以投入使用了</p><p>可以用win+r输入wt快速打开和用cmd类似可以理解为高级好看的cmd终端</p><h3 id="2-3-Scoop包管理器"><a href="#2-3-Scoop包管理器" class="headerlink" title="2.3 Scoop包管理器"></a>2.3 Scoop包管理器</h3><p>scoop是windows下的一个强大的包管理器可以方便快速的安装软件</p><h4 id="2-3-1-scoop安装"><a href="#2-3-1-scoop安装" class="headerlink" title="2.3.1 scoop安装"></a>2.3.1 scoop安装</h4><p>安装scoop很简单只需要在powershell中输入一条指令</p><p><code>iwr -useb get.scoop.sh | iex</code>即可自动安装</p><p>但是默认是在C盘安装所以在运行之前先要更改地址</p><p>并且要让powershell可以执行脚本需要输入</p><p><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code></p><p>回车即可</p><p>之后依次输入下面的<strong>两条指令</strong>‘D:\ScoopApp\Scoop’单引号内部的地址可以更改其他的不要动</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\ScoopApp\Scoop&#x27;</span></span><br><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>, <span class="variable">$env:SCOOP</span>, <span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一条指令没有问题第二条指令也一样单引号内的地址可以更改可能需要管理员身份右键wt以管理身份运行即可</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:SCOOP_GLOBAL</span>=<span class="string">&#x27;D:\ScoopApp\GlobalScoopApps&#x27;</span> [<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;SCOOP_GLOBAL&#x27;</span>, <span class="variable">$env:SCOOP_GLOBAL</span>,<span class="string">&#x27;Machine&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输入上两条指令之后再输入<code>iwr -useb get.scoop.sh | iex</code>即可开始安装scoop了</p><p>安装完成之后在’D:\ScoopApp\Scoop’的地方会有一个scoop的文件夹里面会有</p><ul><li>apps——所有通过scoop安装的软件都在里面。</li><li>buckets——管理软件的仓库，用于记录哪些软件可以安装、更新等信息，默认添加<code>main</code>仓库，主要包含无需GUI的软件，可手动添加其他仓库或自建仓库，具体在<a href="https://zhuanlan.zhihu.com/write#%E6%8E%A8%E8%8D%90%E8%BD%AF%E4%BB%B6%E4%BB%93%E5%BA%93">推荐软件仓库</a>中介绍。</li><li>cache——软件下载后安装包暂存目录。</li><li>persit——用于储存一些用户数据，不会随软件更新而替换。</li><li>shims——用于软链接应用，使应用之间不会互相干扰，实际使用过程中无用户操作不必细究。</li></ul><p>scoop有很多功能可以自行上网查看，这里只用几个最基本的需要用到的</p><ul><li>install——安装软件。</li><li>uninstall——卸载软件。</li><li>update——更新软件。可通过<code>scoop update *</code>更新所有已安装软件，或通过<code>scoop update</code>更新所有软件仓库资料及Scoop自身而不更新软件。</li></ul><p>比如需要安装git只需要在powershell中输入命令<code>scoop install git</code>即可</p><p>scoop + 命令 + 软件名称</p><p> 卸载的话就用<code>scoop uninstall git</code></p><h4 id="2-3-2-安装之后"><a href="#2-3-2-安装之后" class="headerlink" title="2.3.2 安装之后"></a>2.3.2 安装之后</h4><p>安装之后用<code>scoop update</code>进行更新</p><p>之后用<code>scoop bucket add 仓库名 </code>添加仓库</p><p>常用的有以下几个</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">main</span><br><span class="line">extras</span><br><span class="line">versions</span><br><span class="line">nightlies</span><br><span class="line">nirsoft</span><br><span class="line">php</span><br><span class="line">nerd<span class="literal">-fonts</span></span><br><span class="line">nonportable</span><br><span class="line">java</span><br><span class="line">games</span><br><span class="line">jetbrains</span><br></pre></td></tr></table></figure><p>咱们需要用的默认的main和extras可以根据自己需要添加，如：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add main</span><br><span class="line"></span><br><span class="line">scoop bucket add extras</span><br><span class="line"></span><br><span class="line">scoop bucket add java</span><br></pre></td></tr></table></figure><p>main是默认的extras里面有大量的常用的软件java的就是提供java的一些工具</p><p>添加仓库之后用<code>scoop update</code>更新</p><p>之后开始安装软件</p><p>这里推荐用一个<code>scoop install aria2</code>用来加速下载的</p><p>如果报错的话用下面的命令关闭aria2</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop config aria2<span class="literal">-enabled</span> false</span><br></pre></td></tr></table></figure><p>同理改成true即可开启</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop config aria2<span class="literal">-enabled</span> true</span><br></pre></td></tr></table></figure><p>用<code>scoop list</code>可以查看已经安装的程序</p><p>之后记住scoop install 和scoop uninstall就可以了其他的命令功能可以上官网自行查看这里用不到</p><h2 id="3-程序安装"><a href="#3-程序安装" class="headerlink" title="3. 程序安装"></a>3. 程序安装</h2><h3 id="1-zip"><a href="#1-zip" class="headerlink" title="1. zip"></a>1. zip</h3><p>   首先安转一些小工具</p>   <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">先把neovim安装上</span><br><span class="line">scoop install neovim</span><br><span class="line"></span><br><span class="line">scoop install git</span><br><span class="line">scoop install <span class="number">7</span>zip</span><br><span class="line">scoop install aria2</span><br><span class="line">scoop install sudo</span><br><span class="line">scoop install <span class="built_in">wget</span></span><br><span class="line">scoop install unzip</span><br><span class="line">scoop install gzip</span><br><span class="line">scoop install ripgrep</span><br><span class="line">scoop install stylua</span><br></pre></td></tr></table></figure><h3 id="2-nodejs"><a href="#2-nodejs" class="headerlink" title="2. nodejs"></a>2. nodejs</h3><p>   需要nodejs的环境</p>   <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install nodejs</span><br><span class="line">之后用node <span class="literal">--version</span>和npm <span class="literal">--version</span>检查安装版本</span><br><span class="line">输出版本号说明安装成功</span><br></pre></td></tr></table></figure><p>   windows的话可能需要重启一下环境变量才会生效</p><p>   重启之后用npm –version查看输出版本号说明安装成功</p><p>   之后用npm安装一下wsl-open<code>npm install -g wsl-open</code></p><p>   以后wsl的话用的到</p><h3 id="3-fd-find"><a href="#3-fd-find" class="headerlink" title="3. fd-find"></a>3. fd-find</h3><p>   fd-find（<code>npm install -g fd-find</code>）</p><ul><li>需要node.js环境</li><li>可以用<code>scoop install fd</code>之后在neovim里面<code>:checkhealth</code>一下看看</li></ul><p>   windows的话用<code>scoop install fd</code>即可</p><h3 id="4-lazygit"><a href="#4-lazygit" class="headerlink" title="4. lazygit"></a>4. lazygit</h3><p>   git管理器<code>scoop install lazygit</code></p><h3 id="5-安装python"><a href="#5-安装python" class="headerlink" title="5. 安装python"></a>5. 安装python</h3><p>   windows的话直接去官网下载安装程序运行安装程序即可</p><p>   可以参考这个</p><p>   <a href="https://zhuanlan.zhihu.com/p/344887837">全网最详细的Python安装教程（Windows） - 知乎 (zhihu.com)</a></p><p>   主要就是安装python添加环境变量打开powershell之后输入python –version输出版本号书名成功了</p><h3 id="6-python的环境"><a href="#6-python的环境" class="headerlink" title="6. python的环境"></a>6. python的环境</h3><p>   需要在安装完Python之后</p><p>   <code>sudo pip3 install --upgrade pynvim</code></p><h3 id="7-llvm-mingw下载"><a href="#7-llvm-mingw下载" class="headerlink" title="7. llvm-mingw下载"></a>7. llvm-mingw下载</h3><h4 id="7-1-mingw64编译"><a href="#7-1-mingw64编译" class="headerlink" title="7.1 mingw64编译"></a>7.1 mingw64编译</h4><p>   可以到官网直接下载</p><p>   <a href="https://www.mingw-w64.org/downloads/">Downloads - MinGW-w64</a></p><p>也可以不用下载</p><p>这个配置文件夹里面也有直接复制出来之后添加环境变量即可</p><p>怎么添加环境变量后文有说，可以先复制出来一会一起添加，添加完要重启才能生效</p><h4 id="7-2-lldb调试"><a href="#7-2-lldb调试" class="headerlink" title="7.2 lldb调试"></a>7.2 lldb调试</h4><p>gcc的话用gdb调试体验不是很好所以这里用lldb进行调试</p><p>配置文件夹内有一份llvm-mingw快速使用.md有一些基本的lldb的使用方法可以参考一下，也可以直接去官网查看文档</p><p>lldb是llvm的windows的话可以借用库一个是gnu的一个是msvc的就是微软的</p><p>这个是gnu的</p><p>配置文件夹中也有可以直接复制出来使用就行<a href="https://github.com/mstorsjo/llvm-mingw/releases">https://github.com/mstorsjo/llvm-mingw/releases</a>)</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-5.png" class=""><p>ucrt更通用i686是32位x86_64是64位根据自己电脑下载有macos和ubuntu的版本</p><p>这里用的windows直接下载最后</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-6.png" class=""><p>这个就可以了</p><p>下载之后解压放在D盘或者其他盘里面记住路径</p><p>可以用文件夹里面的跳过这步</p><p>之后添加系统环境变量，直接win+i打开设置然后搜索环境变量</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-7.png" class=""><p>搜索打开环境变量</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-8.png" class=""><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-9.png" class=""><p>点击path-&gt;编辑</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-10.png" class=""><p>之后先点新建然后点浏览</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-11.png" class=""><p>在浏览文件夹中找到llvm-mingw文件夹点击bin目录</p><p>之后一路确定即可</p><p>顺便把mingw的也添加进来但是要在llvm-mingw的上面（顺序一定不能弄错）</p><p>补充：这个是msvc的(可以跳过)</p><p><a href="https://github.com/llvm/llvm-project/releases">Releases · llvm&#x2F;llvm-project (github.com)</a></p><p>llvm的github上有了windows班去github上下载llvm-win32或64位的安装程序</p><p>选择添加环境变量安装即可</p><p>优点：llvm-win用的是vs库文件需要安转vs或者安装vs的库</p><p>llvm-mingw用的是gnu的库可以用<code>clang -v</code>来查看</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-12.png" class=""><p>msvc就是vs的链接库llvm-win默认用的就是vs的</p><p>gnu就是mingw的库llvm-mingw默认用的就是gnu的</p><p>msvc的好处是，在终端支持中文显示，但是在neovim内会utf-8乱码（个人觉得不影响-在终端使用方便）</p><p>llvm-mingw默认用的gnu的库，utf-8在vim和终端中都是英文不会乱码</p><p>用llvm-wim的msvc不管是.c还是.cpp文件都可以用clang编译</p><p>但是gnu的.cpp必须用clang++编译</p><p><strong>gnu和msvc二选一即可</strong></p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-13.png" class=""><p><strong>window的话建议用gnu</strong></p><p>改用llvm-mingw用Target：gnu的库，在用msvc的在使用lldb调试的时候打断点会报错</p><p>用mingw的的话编译c++需要用clang++</p><p>在nvim文件夹内的lua文件夹下keybindings.lua的最后</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-14.png" class=""><p>大概四百多行的位置将clang改为clang++即可如果是.c文件用clang即可</p><p>或者使用gcc改成gcc即可</p><p>可以用<code>:400</code>命令或者快捷键<code>400gg</code>快速跳转到四百行就可以看见了</p><p>或者java改成javac等等都可以自行安排</p><p><F5>一键编译之后用快捷键tt（中）或tb（右）或tc（下）打开一个终端窗口（位置不同）</p><p>用编译好的.exe的名称回车即可运行</p><p>powershell的格式是.\a.exe也可以输入文件(.exe)名称如<code>a</code>之后按<TAB>自动补全也可以</p><p>或者用-o改名如<code>g++ hello.cpp -o test.exe</code>即可编译生成hello.exe文件</p><p>之后<code>hello</code>按<TAB>自动补全<code>.\hello.exe</code>回车运行输出结果</p><p>默认<F5><F4>的名称为a.exe</p><h4 id="7-3-结合"><a href="#7-3-结合" class="headerlink" title="7.3 结合"></a>7.3 结合</h4><p>这里使用的是gcc的编译器，clang也可以，看个人选择</p><p>clang的提示会更好mac的话默认用的clang的</p><p>windows的话gcc的兼容性会更好</p><p>但是要注意环境变量的顺序mingw的要在llvm-mingw的上面</p><p>到这里基本所有需要的程序就都已经安装完毕了</p><h4 id="7-4-UTF-8（windows改为utf-8）"><a href="#7-4-UTF-8（windows改为utf-8）" class="headerlink" title="7.4 UTF-8（windows改为utf-8）"></a>7.4 UTF-8（windows改为utf-8）</h4><p>在设置中找到区域设置</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-7-1.png" class=""><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-7-2.png" class=""><p>找到语言管理设置</p><p>!<img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-7-3.png" class=""></p><p>选择更改系统区域设置</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-7-4.png" class=""><p>选用utf-8之后确定即可，需要重启电脑</p><h3 id="8-之后加的gokcehan-x2F-lf"><a href="#8-之后加的gokcehan-x2F-lf" class="headerlink" title="8. 之后加的gokcehan&#x2F;lf"></a>8. 之后加的<a href="https://github.com/gokcehan">gokcehan</a>&#x2F;<strong><a href="https://github.com/gokcehan/lf">lf</a></strong></h3><p>   类似于linux下的lf终端下的资源管理器</p><p>   直接到girhub上下载windows的版本<code>lf-windows-adm64</code>直接下载之后解压</p><p>   或者直接用这个配置文件夹中的</p><p>   文件夹中的是64位的windows的如果需要可以自行下载</p><p>   放在c盘以外的地方之后添加到环境变量中（需要重启一下）</p><p>   在终端中用lf即可打开</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-15.png" class=""><p>和vim操作差不多jk上下移动选择hl左右文件夹e用记事本打开，l打开q退出</p><p>windows的兼容性不是很好只是用来浏览用的</p><h2 id="4-运行neovim"><a href="#4-运行neovim" class="headerlink" title="4. 运行neovim"></a>4. 运行neovim</h2><p>先要安装neovim用<code>scoop install neovim</code>就可以</p><p>将配置文件夹中的nvim文件夹复制粘贴到C盘C:\用户\用户名称\AppData\Local</p><p>整个文件夹复制进来（linux下的可以用.config文件夹）放在Local&#x2F;下面</p><p>之后在wt中打开neovim用nvim回车即可</p><p>第一次打开会自动安装packer插件管理器不用管等待安装完成即可</p><p>如果没有成功查看一下网络打开fastgithub</p><p>安装完成之后在neovim里面用:PackerSync命令进行安装插件</p><p>安装插件也许要可以连接上github用fastgithub或者代理也可以</p><p>全都安装不上就是网络问题</p><p>如果有一两个安装不上重新运行:PackerSync即可</p><p>全部安装好后就可以直接使用了如果有报错可以在neovim中用:CheckHealth检查一下</p><p>却少什么不能用报错error可以warning</p><p>如果报错看看缺少什么安装一下即可</p><h2 id="5-自定义改动"><a href="#5-自定义改动" class="headerlink" title="5. 自定义改动"></a>5. 自定义改动</h2><p>在配置文件中nvim-&gt;lua-&gt;<strong>keybindings.lua</strong>文件包含快捷键以及注释可以自行更改</p><p>上述没有用到oh-my-push如果需要的话可以去微软商店下载安装</p><p>或者百度查找微软商店安装的话需要多安装几次确保安装没有问题</p><p>之后在powershell中用notepad 打开配置文件</p><p><code>notepad $PORFILE</code>打开配置文件</p><p>将配置文件夹中的<strong>Microsoft.PowerShell_profile.ps1</strong>打开全部复制粘贴到里面</p><p>有一个带注释的.ps1的配置文件有具体说明</p><p>使用的时候用不带注释的会快一点</p><p>然后保存关闭在powershell中运行<code>.$PROFILE</code>加载一下即可</p><p>在oh-my-push中<code>Get-PoshThemes</code>可以查看所有主题</p><p>选一款自己喜欢的记住名字<img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-16.png" class=""></p><p>之后用<code>notepad $PORFILE</code>打开配置文件将圈出来的地方改为自己喜欢的主题的名字即可</p><p>保存关闭后用<code>.$PROFILE</code>重新加载</p><p>可以方向键的右键-&gt;补全历史命令用ctrl+-&gt;部分补全</p><p>文件中如果安装<code>scoop install busybox</code>的话可以将<code>Remove-Item alias:\ls</code>之后的删除</p><p>建议安装busybox提供了很多linux的指令</p><p>在nvim-&gt;lua-&gt;plugin-config-&gt;<strong>dashboard.lua</strong>可以更改自己喜欢的开机界面</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-17.png" class=""><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-18.png" class=""><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-19.png" class=""><p>都可以更改，样式会显示最后一个把最后一个删了或更改即可</p><p>至此全部配置完成可以将下载的配置文件夹删除了</p><p>可以实现代码补全，跳转，提示以及编译</p><p>调试的话用的vimspector但是没有配置完全</p><p>这里直接用的lldb去进行调试也是不错的后续有机会会更新</p><p>由于水平有限只能手动安装程序，有实力的选手可以自己写一个安装脚本一键安装</p><p>注：由于github连接问题可能加载不了图片所以所有的截图都放在了单独的文件夹中下载之后就能看了</p><p><a href="https://zhuanlan.zhihu.com/p/68111471">精通 VIM ，此文就够了 - 知乎 (zhihu.com)</a></p><p>可以看看快速了解一下vim以及tmux</p><p>新增主题catppuccin&#x2F;nvim还可以晚上看不错</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-20.png" class=""><p>想改的话可以在主题设置中将第一行取消注释<code>require(&#39;colorschme&#39;)</code></p><p>将第二行注释掉就可以更改了改为gruvbox</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-21.png" class=""><p>或者在colorscheme.lua文件中更改自己喜欢的主题</p><p>tokyonight（星星也很高）和catppuccin&#x2F;nvim效果差不多可以去看官方文档</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-22.png" class=""><h3 id="5-1-starship-terminal-busybox"><a href="#5-1-starship-terminal-busybox" class="headerlink" title="5.1 starship+terminal+busybox"></a>5.1 starship+terminal+busybox</h3><p>由于oh-my-posh启动速度太慢所以改为starship也可以起到美化作用并有参数提示提升速度，当然喜欢oh-my-posh主题的话也可以不换只是启动慢一点，不介意的话没有任何问题，可以去官网参考一下配置</p><p><a href="https://starship.rs/zh-cn/config/">配置 | Starship</a></p><p>可以在windows Terminal中用<code>notepad $PORFILE</code>打开配置文件</p><p><code>#Invoke-Expression (&amp;starship init powershell)</code>将第二行的#去注释把第一行注释掉就行，starship的配置文件放在C:\Users\用户名\ .config文件夹下创建一个名为starship.toml的文件或者直接复制粘贴配置文件夹中的文件</p><p>可以参考官网更更改</p><h2 id="6-快捷键设置"><a href="#6-快捷键设置" class="headerlink" title="6. 快捷键设置"></a>6. 快捷键设置</h2><p>快捷键的话在~nvim\lua下面的keybindings.lua文件中</p><h2 id="7-补充"><a href="#7-补充" class="headerlink" title="7. 补充"></a>7. 补充</h2><h3 id="1-不用go语言的话"><a href="#1-不用go语言的话" class="headerlink" title="1. 不用go语言的话"></a>1. 不用go语言的话</h3><p>添加了go语言的gopls但是安装需要设置一下</p><p>或者不用go语言的话在配置文件夹nvim&#x2F;lua&#x2F;lsp&#x2F;setup.lua将</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-23.png" class=""><p>最后的gopls用<code>-- gopls</code>注释掉就可以了</p><h3 id="用go语言的话"><a href="#用go语言的话" class="headerlink" title="用go语言的话"></a>用go语言的话</h3><p>需要修改系统环境变量</p><p>新建一个环境变量如下</p><img src="/2022/10/21/neovim%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/nvim-peizhi-24.png" class=""><p>之后确定，windows尽量重启一下</p><p>之后就可以自动安装了</p><p>要不然安装gopls的时候会报错</p>]]></content>
      
      
      <categories>
          
          <category> 编程入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog中的图片显示问题</title>
      <link href="/2022/10/20/blog%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/"/>
      <url>/2022/10/20/blog%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="blog中上传-md文件不能显示图片"><a href="#blog中上传-md文件不能显示图片" class="headerlink" title="blog中上传*.md文件不能显示图片"></a>blog中上传*.md文件不能显示图片</h1><h2 id="1-md的分享问题"><a href="#1-md的分享问题" class="headerlink" title="1. *.md的分享问题"></a>1. *.md的分享问题</h2><p>由于*.md文件不能直接存储图片，很多时候向别人分享*.md文件的时候不能显示图片</p><p>先看看用typora怎么办吧</p><p>先去设置中打开偏好设置选图片设置</p><p>在插入图片时复制到.&#x2F;assets文件夹中，并且勾选使用相对路径</p><img src="/2022/10/20/blog%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/md-img-1.png" class=""><p>在图片复制过来的时候会自动创建一个assets的文件夹里面存放截图</p><p>分享*.md文件的时候可以直接连文件夹一起发给对方就可以了</p><h2 id="2-上传在blog中"><a href="#2-上传在blog中" class="headerlink" title="2. 上传在blog中"></a>2. 上传在blog中</h2><p>但是在上传到blog中的时候这里用的hexo架构会发现还是显示不出来</p><p>我这个主题用的butterfly非常经典的一个主题</p><p>我找了很多方法发现网上大多是抄来抄去，基本都是安装什么插件</p><p>基本没啥用，主要是hexo后来更新了，内部自带了很多插件所以不用我们去改直接用就行</p><p>官网已经给出方法了，主要是网上抄的太多了没几个有用的</p><p>看一下官网给的方法</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>直接用这个引用就行了</p><p>将图片放在和*.md的同一个文件夹内就可以了</p><p>不过由于blog的文件都在source里面有点乱</p><p>所以这里单独新建一个文件夹用来存放图片，文件夹的名字和*.md的名字相同</p><p><strong>注意：</strong>这里不是自己创建，要去设置一下</p><p>在blog的根目录下找到_config.yml文件大概在四十多行<code>post_asset_folder: true</code>将false改为true</p><p>之后创建新的文章的时候<code>hexo new &quot;test&quot;</code>会自动生成一个和*.md同名的文件夹可以专门用来存放图片</p><p>将图片放入自动生成的文件夹中，或者将typora的assets文件夹改名字都可以</p><p>之后用</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 图片名称带后缀 %&#125;</span><br></pre></td></tr></table></figure><p>即可</p><p>怕打错名字的话可以直接复制名称，毕竟正常截图的名字都奇奇怪怪的</p><p>在typora里面是看不出来但是在网页上是可以显示的</p>]]></content>
      
      
      <categories>
          
          <category> blog教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog快速搭建教程（基于github和gitpages）</title>
      <link href="/2022/10/19/my-first-blog/"/>
      <url>/2022/10/19/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="1-博客搭建教程"><a href="#1-博客搭建教程" class="headerlink" title="1. 博客搭建教程"></a>1. 博客搭建教程</h2><p>地址是：<a href="https://jiaxinaoliao.xyz/">贾心奥利奥 (jiaxinaoliao.xyz)</a></p><p>用的<code>github + github pages</code>可以说是完全免费了，就是github的话连接不是很稳定</p><p>不过免费的要啥自行车，而且最近都可以直连还是比较稳定</p><p>缺点就是github.io的后缀在百度上是找不到的，不过不影响访问，问题不大</p><h2 id="2-快速搭建教程"><a href="#2-快速搭建教程" class="headerlink" title="2. 快速搭建教程"></a>2. 快速搭建教程</h2><h3 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1. 工具准备"></a>1. 工具准备</h3><p>操作非常简单</p><p>是在windows环境下搭建的,mac的话原理是一样的</p><p>首先要有一个scoop，scoop的安装可以看后面的教程</p><p>mac和linux有自己的包管理器</p><p>首先用scoop安装git和node.js</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install git</span><br><span class="line">scoop install nodejs</span><br><span class="line"></span><br><span class="line">用</span><br><span class="line">npm <span class="literal">-v</span></span><br><span class="line">node <span class="literal">-v</span></span><br><span class="line">检查版本</span><br><span class="line">输出版本说面安装成功</span><br><span class="line"></span><br><span class="line">之后安装hexo</span><br><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line">用</span><br><span class="line">hexo <span class="literal">-v</span></span><br><span class="line">查看版本</span><br></pre></td></tr></table></figure><h3 id="2-github仓库搭建"><a href="#2-github仓库搭建" class="headerlink" title="2. github仓库搭建"></a>2. github仓库搭建</h3><p>github注册的话就不说了去官网<a href="https://github.com/">https://github.com</a>一步一步来注册一个账号即可</p><p>注册账号之后新建一个仓库</p><p>注意仓库的名字（Repository name）要和所有者（Owner）的名字一样比如abc&#x2F;abc.github.io</p><p>abc.github.io后面的github.io是固定的abc要和仓库所有者的名字一样</p><p>最后生成的博客网址就是<a href="https://abc.github.io/">https://abc.github.io/</a></p><img src="/2022/10/19/my-first-blog/my-first-blog-1.png" class=""><p>下面的描述（Description）可写可不写</p><p>可以添加一个.md文件（把下面的Add a README file勾选上即可）</p><p>之后点击绿色按钮创建仓库即可</p><h3 id="3-SSH-key"><a href="#3-SSH-key" class="headerlink" title="3. SSH key"></a>3. SSH key</h3><h4 id="1-连接ssh"><a href="#1-连接ssh" class="headerlink" title="1. 连接ssh"></a>1. 连接ssh</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在终端中用</span><br><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;电子邮件地址&quot;</span></span><br><span class="line">这里的电子邮件是github注册时的电子邮件地址</span><br><span class="line">如：ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;abc@qq.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-添加秘钥"><a href="#2-添加秘钥" class="headerlink" title="2. 添加秘钥"></a>2. 添加秘钥</h4><p>在C:\Users\用户名\.ssh文件夹中（记得要显示隐藏文件才能看见.ssh文件夹）里面有一个<code>id_rsa.pub</code>文件用记事本打开全选复制里面的内容之后打开自己的girhub页面</p><img src="/2022/10/19/my-first-blog/my-first-blog-2.png" class=""><p>找到下面的Settings打开</p><img src="/2022/10/19/my-first-blog/my-first-blog-3.png" class=""><p>打开ssh</p><img src="/2022/10/19/my-first-blog/my-first-blog-4.png" class=""><img src="/2022/10/19/my-first-blog/my-first-blog-5.png" class=""><p>title的话可以写比如my blog之类的没有影响</p><p>在key里面粘贴刚才复制的公钥什么都不要改按绿色按钮添加即可</p><h4 id="3-测试是否成功"><a href="#3-测试是否成功" class="headerlink" title="3. 测试是否成功"></a>3. 测试是否成功</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">之后在终端用</span><br><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br><span class="line">测试是否成功</span><br><span class="line"></span><br><span class="line">成功的话会输出</span><br><span class="line">Hi abc! You<span class="string">&#x27;ve successfully authenticated,</span></span><br><span class="line"><span class="string">之后就可以了</span></span><br></pre></td></tr></table></figure><h2 id="3-生成本地内容"><a href="#3-生成本地内容" class="headerlink" title="3. 生成本地内容"></a>3. 生成本地内容</h2><p>新建一个blog文件夹放在哪里都可以用来存放自己的博客的文件</p><p>之后在终端中cd到blog文件夹中</p><p>如果配置过程中有什么问题直接把blog文件夹删了即可之后再新建一个</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">在文件夹中先进行初始化</span><br><span class="line">hexo init</span><br><span class="line">出现</span><br><span class="line">INFO <span class="built_in">Start</span> blogging with Hexo!</span><br><span class="line">说明安装成功</span><br><span class="line">安装没有成功的话多半是网络问题多运行几遍命令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以直接用</span><br><span class="line">hexo s</span><br><span class="line">和hexo server一样的效果</span><br><span class="line">可以去http://localhost:<span class="number">4000</span>/查看网页初始化的页面</span><br><span class="line">用ctrl+c停止</span><br></pre></td></tr></table></figure><h2 id="4-发布到互联网"><a href="#4-发布到互联网" class="headerlink" title="4. 发布到互联网"></a>4. 发布到互联网</h2><p>在blog文件夹中应该是</p><img src="/2022/10/19/my-first-blog/my-first-blog-6.png" class=""><p>大概这样其中<code>_config.yml</code>需要我们自己修改一下</p><p>可以用记事本打开将最后面的改为</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/abc/abc.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>即可</p><img src="/2022/10/19/my-first-blog/my-first-blog-7.png" class=""><p>在文件的前面位置可以更改title如<code>title: abc</code>以及authot作者等等</p><p>美化的事情后面再说先将博客搭建起来</p><p>更改之后保存关闭之后即可</p><p>之后在终端中运行<code>npm install hexo-deployer-git --save</code>安装一下这个工具</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">之后<span class="built_in">cd</span>到blog文件下</span><br><span class="line">hexo generate</span><br><span class="line">和hexo g效果一样</span><br><span class="line">生成页面</span><br><span class="line"></span><br><span class="line">之后用</span><br><span class="line">hexo d进行上传</span><br><span class="line">和hexo deploy一样</span><br></pre></td></tr></table></figure><p>到此基本就完成了你的网址就是<a href="https://abc.github.io/">https://abc.github.io/</a></p><p>直接用浏览器打开就可以看见了</p><h2 id="5-文章的创建"><a href="#5-文章的创建" class="headerlink" title="5. 文章的创建"></a>5. 文章的创建</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">可以直接在blog文件夹中用命令行</span><br><span class="line">hexo new <span class="string">&quot;myblog.md&quot;</span></span><br><span class="line">需要等待几秒</span><br><span class="line">或者直接在blog的文件夹中的source/_posts下面直接创建.md的文件</span><br></pre></td></tr></table></figure><p>编写好.md文件之后用</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line">本地预览</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line">生成页面</span><br><span class="line"></span><br><span class="line">hexo d</span><br><span class="line">推送出去</span><br></pre></td></tr></table></figure><p>在<a href="https://abc.github.io/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E8%A7%81%E4%BA%86">https://abc.github.io/就可以看见了</a></p>]]></content>
      
      
      <categories>
          
          <category> blog教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
